* The value of adopting GNU Guix for Linux package management 

There are many approaches to software package management.  GNU Guix
affords many advantages which can be understood by various reading,
especially including:

 + [[Http://www.gnu.org/software/guix/manual/guix.html#Introduction][Introduction to the GNU Guix documentation]] (manual)
 + [[http://arxiv.org/abs/1506.02822][Reproducible and User-Controlled Software Environments in HPC with Guix]] (white paper)
 + [[http://elephly.net/posts/2015-04-17-gnu-guix.html][GNU Guix in an HPC environment]] (a blog post)
 + [[https://github.com/pjotrp/Guix-notes][pjotrp/guix-notes]] (developer notes and scripts)

The points below were learned from reading the Guix materials listed
above, and from working and experimenting with deployments of
contending approaches.  They outline the value of adopting GNU Guix in
a scientific computing environment by describing advantages which
should accrue to system administrators, software packagers,
application end-users alike.

** GNU Guix advantages

 + Guix package specifications, being "functional", _cannot_ be
   incomplete; for instance, it is _impossible_ for a deployed Guix
   package to inadvertently depend upon an aspect of the environment
   (such as a shared library) in which it was built and deployed.

 + Guix strictly controls the environment in which packages are built:
   builds always take place in a 'clean' environment (using the linux
   chroot mechanism, inter alia).  This makes it (near) impossible for
   any aspect of the package builders environment to inadvertently
   "leak" into the package binary.  This also makes it necessary, when
   (re-)packaging an application for Guix, to identify any
   incompletely specified packages (i.e. packages having tacit
   prerequisites).  Doing so as early as possible in a package's
   adoption will mitigate exposure to downstream errors.  This is of
   special advantage to novice and/or less-than-expert package
   developers and deployers.

 + Guix prohibits creating environments which load packages containing
   name collisions. This prevents the ambiguity and associated error
   that can arise when two packages define different programs by the
   same name and both are placed in the user's execution PATH.

 + Guix provides for transactional package upgrades and roll-backs.
   Being transactional, these operations either succeed in their
   entirety or they fail - partial upgrades or partial roll-backs are
   not possible, even in the face of process interruption or power
   failure.

 + Guix rollbacks allows easy testing of new package installation with
   a guaranteed means of rapid recovery should post-installation
   testing warrant.

 + Guix allows for the creation of multiple environment profiles,
   which may be per-user (typically), per group (i.e. lab), per
   application, or per project.  These profiles allow for isolation of
   the effects of package changes to only those subscribing to the
   profile.

 + Guix allows for unprivileged package management; users do not need
   special elevated privileges (root or sudo) to create custom
   environment profiles.  Especially noteworthy is that this allows
   for rationally sharing package management as a distributed
   responsibility.  This includes installing new site-available
   applications (for those having available recipes in the Guix
   repositories).  Thus, if one user observes that a new release of a
   site-installed application has become available, that user can
   safely install the upgrade centrally and immediately start using
   it, without effecting any other user's environment; without any
   further coordination, when another user _is_ ready to adopt the
   upgrade, they will find that installation is unnecessary, as it has
   already occurred.

 + Guix explicitly represents package dependencies, allowing for a
   [[https://www.gnu.org/software/guix/manual/html_node/Invoking-guix-gc.html#Invoking-guix-gc][garbage collection]] process to identify and delete packages that are
   installed but no longer required; this allows for reclaiming
   storage, and reducing the size of an installed software catalog.

 + A Guix package, once installed in a profile, will not be altered,
   for example, by having one of the packages upon which it depends
   upgraded.

 + Guix abstracts the idea of [[https://www.gnu.org/software/guix/manual/guix.html#Build-Systems][build systems]] to not only encompass the
   standard Gnu recipe "(configure; make; make test; make install)"
   but to also extend to common language/tool specific
   package/module/add-on managers, including those for R, perl,
   python, ruby, haskell, and emacs.  This should allow a single
   command line protocol for managing the building and deployment of
   such packages.  Additionally, when deployed using guix, they can
   also be enabled with guix using the `[[https://www.gnu.org/software/guix/manual/guix.html#Invoking-guix-environment][environment]]` sub-command,
   providing a unified approach where previously multiple tools might
   have been employed (perlbrew for perl, pyenv or pythonbrew for
   python, rbenv for ruby, etc.)

 + Guix approach to re-packaging facilitates including exactly all the
   package's resources: man pages, libraries, as well as binaries.
   This is a result of their using the underlying/native build
   engine's (i.e. gnu make) installation method.

 + Guix packages, once compiled are independent on the host on which
   they are built, or its specific GNU/Linux distribution, or its
   version.  Thus, for example, packages built under CentOS 6.5 on
   x86_64 will run under operating system on x86_64, for example,
   CentOS 7.x and or Ubuntu 15.10 or 14.04.  (They may occasionally be
   dependent upon the machine architecture, i.e. for certain compiler
   optimizations).

 + Guix packages, being independent of host on which they are built,
   can be downloaded already built by upstream servers known as
   [[https://www.gnu.org/software/guix/manual/html_node/Substitutes.html#Substitutes][substitutes]], saving on the generally longer process of
   configuration and compilation on local servers.

 + Guix packages can be developed and deployed locally without
   necessarily contributing to the upstream open-source repository.
   This allows in-house/bespoke software to be deployed using Guix
   without forcing to release it publicly.

 + Guix facilitates building analysis pipelines that are reproducible
   locally (through environments or shared profiles) and can be shared
   with external collaborators (i.e. using guix's archive subcommand).

 + Guix intends to guarantee the reproducibility of a software
   environment across HPC systems; a computational pipeline should be
   portable into another Guix environment with the expectation that it
   will run identically.

 + Guix provides commands to [[https://www.gnu.org/software/guix/manual/guix.html#Emacs-Commands][display package information]] which can be
   used to automate the production and publishing of software package
   catalogs.  Such catalogs may then be shared, printed, emailed, or
   embedded into community-visible web pages as various means of
   advertising package availability to the research community.

 + Guix package specifications, being written in [[https://www.gnu.org/software/guix/manual/guix.html#Defining-Packages][Guile/scheme]], do not
   depend upon the users SHELL (i.e. guix works equally well with zsh,
   bash, tcsh, etc) (TODO: confirm).

 + Guix [[https://www.gnu.org/software/guix/manual/guix.html#Invoking-guix-package][simplifies package installation]]: viz. `guix package -i abyss`
   serves to download, compile, test, and install the most recent
   version of abyss known to guix repository.

 + Guix has a future - it is the package manager for [[https://www.gnu.org/software/guix/][GuixSD]], the new
   GNU/Linux distribution backed by [[https://www.gnu.org/][the GNU project]].

 + Guix is [[https://www.gnu.org/software/guix/manual/][well documented]].

 + Guix features are under continued development, including tools for
   + [[https://www.gnu.org/software/guix/manual/guix.html#Invoking-guix-graph][production of graphs]] for visualizing dependencies between packages
   + [[https://www.gnu.org/software/guix/manual/guix.html#Emacs-Completions][shell 'completion']] facilities
   + [[https://www.gnu.org/software/guix/manual/guix.html#Emacs-Interface][emacs integration]] (optional) as interface for package development
     and management.

 + Guix has [[https://www.gnu.org/software/guix/contribute/][rich community support]]; bugs will be fixed - features will
   be improved.

 + Guix community has already prepared [[https://www.gnu.org/software/guix/packages/][over 8,000 recipes]], of which
   currently [[http://guix.mdc-berlin.de/][335 are bioinformatics]] packages.

 + Guix packaging is relatively easy to learn. It is reasonably
   documented and there are `lint` style tools that check recipes for
   being well-structured; they identify common errors in package
   specification.

 + Guix development is open source.  It is open to input from all
   community members.  It is free software!

Guix provides a well-engineered, supportable, portable, and extensible
approach to software package and environment management. It allows to
adopt and create unambiguous, clearly-specified, stand-alone, and
reproducible software environments.  It provides the administrative
flexibility to deploy with transactional control a common standard
suite of applications, as well as the agility to quickly respond to
individual user and application requirements for more customized
environments.  Guix reduces the administrative burden for software
package and environment management by allowing it to be distributed
among researchers, with a natural means of coordination of effort.  By
offering a unified approach to environment management, it replaces the
need for multiple other such tools, reducing support overhead.  Guix
can serve the needs for computational reproducibility through means of
sharing these environments across a range of hosts and computer
operating systems with both internal collaborators as well as the
broader research community.

In short, Guix provides a rigorous response to requirements for
package and environment integrity in a rapidly evolving research
computing environment while easing and distributing the burden of
administration.

