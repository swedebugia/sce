# -*- org-export-babel-evaluate: nil; org-export-allow-bind-keywords: t -*-
#+SETUPFILE: ~/.emacs.d/SETUPFILE.org
#+TITLE: Stowers Computing Environment (sce) \n Linux package management with guix
#+DATE: <2015-06-08 Mon>
#+AUTHOR: Malcolm Cook
#+EMAIL: malcolm.cook@gmail.com

* Table of Contents							:TOC_2:
 - [[#administering-guix][Administering guix]]
   - [[#deploying-base-machine-mangocatalpa][Deploying Base Machine (Mango/Catalpa)]]
   - [[#packages-installed-by-jennydustin-on-mango-at-my-request][packages installed by Jenny/Dustin on mango at my request]]
   - [[#install-build-preconditions-on-guix_srvr-][Install build preconditions on GUIX_SRVR ]]
   - [[#configure-nfs-share][Configure NFS share]]
   - [[#configuration-of-quix][Configuration of quix]]
   - [[#deploy-quix][Deploy: quix]]
   - [[#advanced-guix][Advanced guix]]
   - [[#alternate-installation-notes-][Alternate installation notes ]]
   - [[#configure-emacs][configure emacs]]
   - [[#site-configuration][Site configuration]]
 - [[#using-guix][Using guix]]
   - [[#using-the-guix-package-command][Using the `guix package` command]]
 - [[#why-guix][Why guix]]
   - [[#guix-is-better-than-biobrew][guix is better than bio.brew]]
 - [[#guix-deployment-status--notes-to-self][GUIX deployment STATUS / notes to self]]
 - [[#qa][Q/A]]
 - [[#todo][TODO:]]
 - [[#references--links][References & Links]]
 - [[#notessuggestionsbest-practices][Notes/Suggestions/Best Practices:]]
 - [[#comment][COMMENT]]
   - [[#apps-to-port][apps to port]]
 - [[#comment---recipes][COMMENT - recipes]]
   - [[#igv][IGV]]
   - [[#igv-developer-distribution][IGV Developer Distribution]]
   - [[#igvtools][IGVtools]]
   - [[#homebrew-installation--configuration][homebrew: installation & configuration]]
   - [[#emacs][emacs]]
   - [[#mysql][mysql]]
   - [[#homebrew-pkgs][homebrew pkgs]]
   - [[#more-brew-packages][more brew packages]]
   - [[#r][R]]
   - [[#bioconductor-and-other-r-modules][BioConductor and other R modules]]
   - [[#perl][Perl]]
   - [[#other-perl-modules][OTHER Perl modules]]
   - [[#-jim-kent-src][* Jim kent src]]
   - [[#aspera-client][Aspera Client]]
   - [[#mpich2][mpich2]]
   - [[#meme][meme]]
   - [[#sra-toolkit-from-ncbi][SRA Toolkit (from ncbi)]]
   - [[#perl-biodbsam][perl Bio::DB::Sam]]
   - [[#epcr][EPCR]]
   - [[#emboss][emboss]]
   - [[#vmatch][vmatch]]
   - [[#comment][COMMENT]]
   - [[#io_lib-for-illumin2srf][io_lib (for illumin2srf)]]
   - [[#biodbsam][Bio::DB::SAM]]
   - [[#aspera-client][ASPERA client]]
   - [[#sra-toolkit][SRA Toolkit]]
   - [[#gsnap--gmap][gsnap & gmap]]
   - [[#maq][maq]]
   - [[#bwa][bwa]]
   - [[#cdb][cdb]]
   - [[#cdbfasta-][cdbfasta ]]
   - [[#seqtk][seqtk]]
   - [[#biotoolsprimer3redux][Bio::Tools::Primer3Redux]]
   - [[#spatialite][spatialite]]
   - [[#omake-httpomakemetaprlorgindexhtml][OMake (http://omake.metaprl.org/index.html)]]
   - [[#pileline][PileLine]]
   - [[#httpgenometoolsorg-][http://genometools.org/ ]]
   - [[#rnacontext][rnacontext]]
   - [[#sequenceread-for-illumina2srf-needed-by-geo-submission][sequenceread (for illumina2srf needed by GEO submission)]]
   - [[#gatk][GATK]]
   - [[#google-command-line][google command line]]
   - [[#tamo][TAMO]]
   - [[#gfortran][gfortran]]
   - [[#gcc][gcc]]
   - [[#apache][Apache]]
   - [[#sqsh][sqsh]]
 - [[#][]]

* Administering guix
Installing, Configuring & Deploying guix
** Deploying Base Machine (Mango/Catalpa)

 + Building on minimally configued CentOS7 (TBW: jenny? define
   minimal - ie.. missing help2man inter alia)

** packages installed by Jenny/Dustin on mango at my request
these packages are on top of the original base install image
#+BEGIN_SRC sh
sudo yum install libtk (needed by R library MASS and expected to be found on local host).
#+END_SRC


** Install build preconditions on GUIX_SRVR 


In particular, package abrt-console-notification needs to be current
(which fixes recent recognized upstream bug:
https://bugzilla.redhat.com/show_bug.cgi?id=1139001 with a
corresponding fix: https://rhn.redhat.com/errata/RHBA-2015-0556.html)

This will be included by a current
#+BEGIN_SRC sh 
yum -y update
#+END_SRC

#+CAPTION: Install required vendor packages
#+begin_src sh   :lang bash
sudo yum -y groupinstall "X Window System" "Desktop" "Fonts" "General Purpose Desktop"
sudo yum -y install autoconf 
sudo yum -y install automake
sudo yum -y install bzip2
sudo yum -y install gettext 
sudo yum -y install gettext-devel # nb gettext on centOS which is at latest already!g
sudo yum -y install gnupg
sudo yum -y install gnutls
sudo yum -y install graphviz
sudo yum -y install guile
sudo yum -y install guile-devel ## includes guile.m4, a dependency of guix ./bootstrap
sudo yum -y install help2man
sudo yum -y install libgcrypt-devel
sudo yum -y install make
sudo yum -y install pkgconfig 
sudo yum -y install sqlite
sudo yum -y install sqlite-devel
sudo yum -y install texinfo
sudo yum -y install texinfo-tex
#+end_src

TODO: could not get gnutls guile to work

in order for guile to pick up JSON, just
GUILE_LOAD_PATH="/usr/local/share/guile/site:$GUILE_LOAD_PATH" guile
TODO?: re-install guile-json elsehow?

#+CAPTION: install gnutls
#+begin_src sh
wget ftp://ftp.gnutls.org/gcrypt/gnutls/v3.3/gnutls-3.3.16.tar.xz
tar xf gnutls-3.3.16.tar.xz
cd gnutls-3.3.16
  --with-libdir=lib64 \
./configure \
  --with-guile-site-dir=no \  ## This will instruct GnuTLS to
				      ## attempt to install the Guile
				      ## bindings where Guile will
				      ## look for them. It will use
				      ## guile-config info pkgdatadir
				      ## to learn the path to use make
# sudo ldconfig suggested by https://lists.gnupg.org/pipermail/gnutls-help/2013-May/003145.html without which
# make errors with:
#../lib/.libs/libgnutls.so: undefined reference to `nettle_secp_224r1'
#../lib/.libs/libgnutls.so: undefined reference to `nettle_secp_192r1'

make
make test
make install

#+end_src

#+CAPTION: install guile
#+begin_src sh
git clone git://git.savannah.nongnu.org/guile-json.git
cd guile-json
autoreconf -i			#  kudos http://askubuntu.com/questions/27677/cannot-find-install-sh-install-sh-or-shtool-in-ac-aux
./configure
make
sudo make install
#+end_src



** Configure NFS share

#+CAPTION: create NSF exported ${GNU}   - TODO TBW by jenny?
#+BEGIN_SRC sh

#+END_SRC


#+CAPTION: configure SHELL environment for guix 

#+BEGIN_SRC sh :results none
cat <<'EOF' > guix.init.sh
GUIX_SRVR=catalpa.sgc.loc
GNU=/gnu
export PATH=${GNU}/bin:"${PATH}"
export MANPATH=${GNU}/bin:"${PATH}"
GUIX_PROFILE="$HOME/.guix-profile" \
source "$HOME/.guix-profile/etc/profile"
#export PATH="${HOME}/.guix-profile/bin:${PATH}"
#export MANPATH="${HOME}/.guix-profile/man"
EOF
#+END_SRC


NOTEs: 

 - /gnu must be mounted without root squashing
 - `make check` fails in NFS mount home since default file perms
   include NFS_FACL of 'x' (which is arguable wrong).  So, build and
   test/check is happening (for now) in /tmp (which has advantage
   anyway of being faster)
 - deploy to /gnu mounted as network share
 - appropriate configure and/or make options

#+CAPTION: install guix, following http://www.gnu.org/software/guix/download/
#+begin_src sh

#ssh mango
ssh catalpa
bld=/tmp/mec/sce
mkdir -p ${bld}
cd ${bld}

################################################################################
# binary (re)installation - following http://www.gnu.org/software/guix/manual/html_node/Binary-Installation.html with changes for shared /gnu
systemctl stop guix-daemon.service # allows to close any files which might be open in the store so they can be deleted
VAR=/var
NIX_STATE_DIR=${VAR}/guix
cd /tmp
rm -rf ./var ./gnu
wget ftp://alpha.gnu.org/gnu/guix/guix-binary-0.8.3.x86_64-linux.tar.xz
tar xf guix-binary-0.8.3.x86_64-linux.tar.xz --warning=no-timestamp
rm -rf /var/guix /gnu/var/guix 
rm -rf /gnu/* 
mv gnu/* /gnu # which currently moves only /gnu/store
mv var/guix ${VAR} # instead of localhost
##adjust symlinks
ln -sf -T ${VAR}/guix/profiles/per-user/root/guix-profile-1-link ${VAR}/guix/profiles/per-user/root/guix-profile 
ln -sf -T ${VAR}/guix/profiles ${VAR}/guix/gcroots/profiles
ln -sf ${VAR}/guix/profiles/per-user/root/guix-profile ~root/.guix-profile
# change the name of the group
perl -pi -e 's/guixbuild/guix-builder/g'  ~root/.guix-profile/lib/systemd/system/guix-daemon.service 
# install it as a service
/bin/cp -f ~root/.guix-profile/lib/systemd/system/guix-daemon.service /etc/systemd/system
# start the daemon as a service
systemctl start guix-daemon.service
# alternatively, run the daemon from the command line
#~root/.guix-profile/bin/guix-daemon --build-users-group=guix-builder
# make command available to all users:
mkdir /gnu/bin
export PATH=/gnu/bin:"${PATH}"
ln -s -f -t /gnu/bin  ${VAR}/guix/profiles/per-user/root/guix-profile/bin/guix
guix archive --authorize < ~root/.guix-profile/share/guix/hydra.gnu.org.pub
################################################################################
## first packages
guix package -i glibc-utf8-locales ## glibc-locales
export LOCPATH=$HOME/.guix-profile/lib/locale
guix package -i fontconfig
guix package -i gs-fonts
guix package -i font-dejavu
guix package -i font-gnu-freefont
guix package -i emacs
guix package -i gdk-pixbuf # needed by emacs 
export PATH="/root/.guix-profile/bin:/root/.guix-profile/sbin:${PATH}"
gdk-pixbuf-query-loaders  --update-cache
guix package -i libcanberra # needed by emacs - along with:
export GTK_PATH=/gnu/store/*-libcanberra-0.30/lib/gtk-3.0/modules

if [ -z "$GTK_MODULES" ] ; then     
        GTK_MODULES="libcanberra-gtk-module"
else
        GTK_MODULES="$GTK_MODULES:libcanberra-gtk-module"
fi

guix package -i gnome-icon-theme

################################################################################
guix build samtools

################################################################################

wget ftp://alpha.gnu.org/gnu/guix/guix-0.8.3.tar.gz.sig
tar xf guix-0.8.3.tar.gz
cd guix-0.8.3
################################################################################
# first time git clone git://git.savannah.gnu.org/guix.git 
cd guix
git pull

################################################################################

make clean
./bootstrap
#./configure --localstatedir=/gnu/var --exec-prefix=/gnu  
./configure --prefix=/gnu   ## --localstatedir=/gnu/var --exec-prefix=/gnu  
j=40
make -j $J
#make doc/guix.info # allowing: info -f doc/guix.info
make doc/guix.pdf # requires texi2dvi
make doc/guix.html
make -j $j check    

# mv guix-0.8.3 ~/project/sce/ # from tmp into project
# rm -rf  guix-0.8.3* & # clean up tmp
# chmod -R u=rwx  guix-0.8.3 # some didn't want to delete
# rm -rf  guix-0.8.3* & # clean up tmp

## some temp dirs 
##su - guix # become user guix
##cd ~mec/project/sce/guix-0.8.3

ssh catalpa
sudo su 
bld=/tmp/mec/sce
mkdir -p ${bld}
cd ${bld}
rm -rf guix
scp -q -r mec@mango:/tmp/mec/sce/guix .
cd guix
make install  # any value to separately install-data install-exec 

export PATH=/gnu/bin:"${PATH}"

guix archive --authorize < ~root/.guix-profile/share/guix/hydra.gnu.org.pub

systemctl start guix-daemon.service


# start the daemon

#killall guix-daemon # in case already running (i.e. we're developing this install/configure recipe)
#nohup /gnu/bin/guix-daemon --build-users-group=guix-builder &
tail -f /root/nohup.out &
##&2> /var/log/guix-daen.log & ## TODO: get into system.d - have it log - with rotation
systemctl restart guix-daemon.service
systemctl status guix-daemon.service

#rm -rf /gnu/var/guix/profiles/per-user ## the doc says this should happen by the daemon but not!  FIXME! BUG?
mkdir /gnu/var/guix/profiles/per-user ## the doc says this should happen by the daemon but not!  FIXME! BUG?
chmod a+w /gnu/var/guix/profiles/per-user

exit # return to be mec on catalpa
export PATH=/gnu/bin:"${PATH}"
guix build hello
guix package -i hello
# 

guix package -i socat

sudo su
guix package -i socat

## on GUIX_SRVR


/root/.guix-profile/bin/socat TCP4-LISTEN:9999  UNIX:/var/guix/daemon-socket/socket

## On a client node where /gnu is mounted read-write I ran this:

export GUIX_DAEMON_SOCKET=/gnu/var/guix/daemon-socket/`hostname`-socat  & socat UNIX-LISTEN:${GUIX_DAEMON_SOCKET}  TCP4:guix-builder:9999

##socat UNIX-LISTEN:/home/rwurmus/foo TCP4:guix-builder:9999 &    export GUIX_DAEMON_SOCKET=$HOME/foo

At this point I could use

    guix build hello
    guix environment hello


#+end_src

TODO: ensure to use the branch corresponding to release

Considerations:
 ./configure options:
 - localstatedir " is the value passed to configure as
   --localstatedir" per convention defined in [[https://www.gnu.org/prep/standards/html_node/Directory-Variables.html][GNU Coding Standards:
   Directory Variables]]
 -  [[https://gnunet.org/bot/log/guix/2015-02-10][discussion archive]] - 
  - it should be shared -  is /gnu/var

This recipe has me 
 - build/test on mango (which is fast)
 - as mec
 - in /tmp (which is local and therefore does not have wonkey execute
   permission which causes `make check` to fail
 - copy to /tmp on catalpa (where I have root)
 - install from catalpa as root

##localstatedir
NIX_STATE_DIR=/gnu/var

> Alternately, you can also do:
>
>   guix build guix --with-source=/path/to/guix

> One can run:
>
>   GUIX_PROFILE=$HOME/.guix-profile . ~/.guix-profile/etc/profile

TODO: there is also a `guix pull` command - what is that about

** Configuration of quix

Difference from http://www.gnu.org/software/guix/manual/guix.html :
 - /gnu/store is nfs mounted read/write everywhere
 - /gnu is owned by new user, guix (instead of root)
 - guix-daemon runs as guix (not root)

GUIX_DAEMON_SOCKET: "Actually, clients honor the (undocumented) ‘GUIX_DAEMON_SOCKET’
environment variables, so that’s one thing you could use."

#+CAPTION: example of running a single test which proving the install
#+BEGIN_SRC sh
make check TESTS=tests/syscalls.scm 
#+END_SRC


#+CAPTION: Make the "builder users" and their group... 
#+begin_src sh
sudo groupadd guix-builder # already exists

for i in `seq 1 10`; do
    sudo useradd -g guix-builder  -G guix-builder           \
                 -d /var/empty -s `which nologin`          \
                 -c "Guix build user $i" \
                 guix-builder$i;
  done

## NOT: in the above --system          \

# Make the /gnu/store directory, where packages are kept/built
#sudo -u guix mkdir -p /gnu/store

sudo -u guix chgrp -R guix-builder /gnu/store
sudo -u guix chmod -R 1775 /gnu/store

## TODO: do we really want/need to permissions to be 3775 - u=rwx,g=rwx,a=rx sticky and set gid
## chgrp -R guix-builder 

ls guix/tests/*.log | xargs -i echo "{}\n" && cat {} >> guix/test.logs

#+end_src
Notes:
 - purpose of builder user accounts is to allow the daemon process to offload
   package building while keeping things nicely contained

#+CAPTION: produce confirmatory report on the "builder user"
#+BEGIN_SRC sh :results output :exports both
getent passwd guix
getent group guix-builder
getent passwd guix-builder1
#+END_SRC

#+RESULTS:
: guix:$1$E5Ru3NpE$wZZY.cM8TwbRMHBI1UP110:3036:20302:Guix build user:/var/empty:/bin/bash
: guix-builder:!:20302:guix-builder1,guix-builder2,guix-builder3,guix-builder4,guix-builder5,guix-builder6,guix-builder7,guix-builder8,guix-builder9,guix-builder10
: guix-builder1:!!:3048:20302:Guix build user 1:/var/empty:/sbin/nologin

#+CAPTION: Create startup script to deploy within /etc/profile.d
#+begin_src sh  :lang bash
sudo cat <<EOF > sce_guix.sh
???
EOF
#+end_src

** Deploy: quix
While still 'experimenting', you might not yet want to take this next
'install' step:

Declare alternate location for storing (custom) packages: 
#+begin_src sh
gp=$(readline -m ./guix_package)
mkdir gp 
export GUIX_PACKAGE_PATH=${gp}:${GUIX_PACKAGE_PATH}
#+END_SRC
** Advanced guix
*** Creating a new recipe for installing a new application
TBW
*** Using Emacs interface to guix 

install guix.el following https://github.com/alezost/guix.el

** Alternate installation notes 
*** bootstrapping
If guix is already installed, you could
#+BEGIN_SRC sh
guix package --install autoconf automake bzip2 gcc-toolchain gettext \
                             guile libgcrypt pkg-config sqlite

#+END_SRC
** configure emacs
#+BEGIN_SRC lisp
(package-install 'geiser)
(require 'geiser)
(setq-default geiser-guile-load-path '("~/src/guix"))
#+END_SRC
*** Publishing a list of installed packages to our confluence based software catalog
PLAN:
#+BEGIN_QUOTE
How to coordinate guix/plack content with wiki user content:

Have one wiki/confluence page for each scientific applications,
systematiclly named after the app, created according to a template.

Have special section of the page reserved for being written to by guix

have tool to update/create wiki page for any guix managed app

First time we run it it pre-creates all pages for guix managed apps.
#+END_QUOTE

*** Notifying interested parties when packages are updated
Users 'self-select' by watching associated confluence page
** Site configuration
Everyone needs following additional shell
* Using guix

The section presents how to use guix to learn about available
applications, and to get them loaded into your unix environment.

** Using the `guix package` command

You will most often use the `quix package` command to 

*** Learning what applications have already been installed.
TBW
*** Getting details about an installed application.
TBW
*** Learning which installed applications are in your current environment.
TBW
*** Controlling which installed applications are in your current environment.
TBW
*** Setting up a project specific environment.
TBW
*** Learning what applications are available for installation
TBW
*** Using guix instead of python's pip
TBW
*** Enabling reproducible research

* Why guix
TWB
** guix is better than bio.brew
SIMR has gone through a variety of approaches to managing deployment
and documentation of a wide scientific applications over the years.
Most recently, we are using in-house developed bio-brew.

The following issues with current bio.brew approach should be
addressed in this effort.
   + obscure/opaque:
     + it wraps/hides the actual commands that are used to
       configure/make/test/install.  It does this in an attempts to be
       a useful abstraction, but in fact it is not.  The recipes should
       either be in SHELL such as bash, or well documented interface to
       unix system.
     + it only exposes selected parameters to install (i.e. can not
       cause make to run verbosely without changing the wrappers)
     + it adds one more layer between source code and install with
       intervening *undocumented* variables for communicating state
       between recipes and the engine.
   + redundant
     + recipes must explicitly list the files to be installed:
       /n/local/bin/bio.brew/recipes/blast+ which requires recipes to
       be re-written when upstream application changes to change
       binaries.  Most install mantras have their own list.  It should
       be sufficient to simply provide a PREFIX.
   + INCOMPLETE: does not
     + run tests
     + detect collisions (due to either multiple versions of a package,
       or multiple packages with identically named files)
     + install manpages, libraries, (anything other than binaries)
       without special code.
     + provide for environment configuration with shells other than
       bash (i.e. csh is bash only (i.e. for_env assumes bash)
     + allow swapping between alternate builds (i.e. deactivate not supported) 
     + does not handle versioned man pages - or manpages at all for that
       matter
     + environment variables are NOT version specific - not possible to
       have different environments for each versioned install of an app.
     + allow end-user control of apps in end-user environment - it is an all or none affair.
   + ISSUES:
     + advises to 'bb remove full.pkg.name'
     + the 'logs' directory contains non-logs
     + logs are not version specific - installing/building a new version
       overwrites the log of any previous install
     + uses wierd terminology - 'install' does not install typically it
       only builds.
     + installs things using symlinks.  This is unexpected by some apps,
       esp naively coded ones, such as university coded ones like rsem, 
       and leads to long testing/debugging session.
   + TODO: contribute patch of  rsem-calculate-expression to use FindBin::RealBin
* GUIX deployment STATUS / notes to self
- install from source or from 0.8.3 tarball
- how to bootstrap network ready install?
- if build, then
	./configure --prefix=/gnu
or
	./configure --localstatedir=/gnu/var --exec-prefix=/gnu  
- init.d system.d 
- still needed?
 	mkdir /gnu/var/guix/profiles/per-user ## the doc says this should happen by the daemon but not!  FIXME! BUG?
 	chmod a+rwx /gnu/var/guix/profiles/per-user
- TBW: transition plan?
http://debbugs.gnu.org/cgi/bugreport.cgi?bug=20381
- "Interacting with a remote daemon" - socat test and report "If you
  could test this and provide feedback about the other options
  discussed there, that would be great (please email
  20381@debbugs.gnu.org.)"

We use 'guix' package manager to manage our CentOS-based
bioinformatics and other scientific computing applications.  This
document describes how to this is done.  The section "Everybody's
guix" shows you the basic package management method you need to see
what applications are installed and how to choose between them.
"Installing, Configuring, and Deploying guix" details the specifics of
our site deployment.  "Q/A" provides answers to questions that were
not readily apparent from a first read of the documentation.  "TODO:"
lists local configurations and integrations that, once performed, will
make guix even more useful to the administrator and
end-user. "References & Links" provides pointers found valuable during
the initial study and deployment of guix.
* Q/A
+ How is package recipe used for alternate versions of the package???
+ How does this approach track with changes in the recipe??
+ How are build options handled (i.e. `make --with-gtk `)???
* TODO:
+ address all TODO/FIXME/TBW items.
+ provide answers to all the Q/A
+ enable/use emacs interface to guix package management
+ socat
+ reports of locally installed packages are posted on wiki
+ feed to install activity
+ method for categorizing packages using tags
+ Document: "Linux package management with guix"
  + is available
    + in github
    + published to wiki
  + is used as base material for series of workshops
* References & Links
+ [[http://www.gnu.org/software/guix/manual/guix.html][GNU Guix Reference Manual]] ([[https://www.gnu.org/software/guix/manual/guix.pdf][pdf]])
+ [[http://arxiv.org/abs/1506.02822][Reproducible and User-Controlled Software Environments in HPC with Guix]]
+ [[http://savannah.gnu.org/git/?group=guix][GNU Guix - Git Repositories on Savannah]]
+ [[https://www.gnu.org/software/guix/package-list.html][GNU Guix Package List]] - lists packages that are part of base guix
  (you get 'out of the box') - includes a few bioinfo packages -
  samtools, bwa, etc
+ [[https://www.gnu.org/software/guix/][GNU's advanced distro and transactional package manager — GuixSD]] - a
  GNU linux distro which uses guix as its package manager.

+ [[http://guix.mdc-berlin.de][A searchable package list]] - 'You can search for “bioinfo” and all
  packages in the bioinformatics module should be displayed.  There
  are also some machine learning packages and statistics packages that
  are used in bioinformatics, but are not located in this module.'
+ dedicated build system for R packages and an importer for CRAN
  packages.  Creating a Guix package expression from a CRAN package
  (e.g. DBI) now takes little more than this:

    guix import cran DBI

  The output is an expression that takes very little editing can be
  bound to a variable in statistics.scm.  To add the package to Guix
  upstream then only requires submitting a simple patch to
  guix-devel@gnu.org.
+ [[http://hackersome.com/p/alezost/guix.el][Emacs interface for Guix package manager]] - out of date - screen shots 
+ [[http://elephly.net/posts/2015-04-17-gnu-guix.html][rekado - GNU Guix in an HPC environment]] -  blog post -
  + refers to set of recipes [[http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/bioinformatics.scm][guix.git - guix bioinformatics source
    archive]]
  + [[https://github.com/BIMSBbioinfo/guix-nonfree/blob/master/bimsb/packages/bioinformatics-nonfree.scm][guix-nonfree/bioinformatics-nonfree.scm]] - Ricardo Wurmus' repos
    of 'non-free' bioinfo apps including: DiNup, macs-1, tophat(!), viennarna
+ [[https://gnunet.org/gnu-guix-initd-script][GNU Guix initd scriptPrimary]] - HowTo: start guix daemon on system startup
+ [[http://dustycloud.org/blog/guix-package-manager-without-make-install/][Guix package manager without "make install"]] - HowTo: run guix out of
  the src tree without installing it
+ [[http://dthompson.us/reproducible-development-environments-with-gnu-guix.html][Reproducible Development Environments with GNU Guix]] - blog post -
  + considers new(ish) `guix environment` command as replacement for
    Python's pip/virtualenv, PHP's composer, node.js' npm
  + demos a package which does not have any source code of its own -
    it only has run-time preconditions of other packages which must be
    "on path". (this is what spack called a "meta-package")
  + demos usage of `--pure` option 
+ https://github.com/pjotrp/guix-notes includes sections on:
  + on installation 
  + [[https://github.com/pjotrp/guix-notes][Hacking Guix]]:
  + current notes / bioinformatics / hacking tips /
  + lots on ruby gems
+ [[https://github.com/BIMSBbioinfo/guix/blob/master/gnu/packages/bioinformatics.scm][(define-module (gnu packages bioinformatics)]  - bioinfo repos - now taken down - 
  including: bedops, bedtools, python2-pybedtools, bowtie,, bwa,
  python2-bx-python, clipper, clustal-omega,
  crossmap,cutadapt,flexbar, hisat, htseq, htsjdk, macs,
  miso,.... samtools, seqan, star, shogun, vcftools,

* Notes/Suggestions/Best Practices:

#+BEGIN_QUOTE
snippets - things poelple do

./pre-inst-env guix build ipcalc --keep-failed ;;; note: source file 

$ ./configure --with-libgcrypt-prefix=$HOME/.guix-profile/
--localstatedir=/var


--prefix=/tmp


#+END_QUOTE

nderstand: binary deployment (when not altering: –with-store-dir OR –localstatedir)

- CURRENTLY: Guix is not designed to be run in a centralised manner. A
  Guix daemon is supposed to run on each system as root and it listens
  to RPCs from local users only. In an environment with multiple
  clusters and multiple workstations this approach requires
  considerable effort to qmake it work correctly and securely.

[[http://www.gnu.org/software/guix/manual/guix.html#Invoking-guix-publish][guix publish]]  - consider using

guix export & import - can translate nix pkgs and be used to move
packages across machines/installations.

#+BEGIN_QUOTE
#+END_QUOTE
* COMMENT
** apps to port

*** non-free
mathworks_download
MATLAB
aspera-connect

*** free

editted from `find /n/local/stage/ -maxdepth 1 -type d | sort | parallel basename {} `


 - abyss
 - amos
 - bam2fastq
 - bam_stats
 - bamtools
 - bcftools
 - bedtools
 - bioawk
 - bismark
 - blast+
 - #blat - as part of jimKentUtils
 - bowtie2
 - bpipe
 - circos
 - cufflinks
 - cytoscape
 - ensembl_perl
 - epcr
 - fastqc
 - fastx_toolkit
 - gapcloser
 - gatk
 - ggobi
 - go
 - graphviz
 - hmmer
 - igv
 - igvtools
 - io_lib # from staden
 - jellyfish
 - jimKentUtils
 - locarna
 - macs14
 - meme
 - mfold
 - mfold_util
 - miranda
 - mirdeep2
 - MUMmer3.23
 - muscle
 - ncbi_sra_toolkit
 - neuroscope
 - ngsutils
 - novocraft
 - parallel
 - philGreenUtils
 - picard
 - pigz
 - primer3
 - pymol
 - relocate
 - RNAz
 - rsem
 - seqtk
 - sge
 - snpeff
 - snpomatic
 - soapdenovo2
 - sparsehash
 - ssaha_pileup
 - sshpass
 - staden
 - star
 - tabix
 - tophat
 - trimmomatic
 - trinity
 - velvet
 - viennaRNA
 - wublast

* COMMENT - recipes
these recipes were used by Malcolm on Marco's genekc07: and are copied
here for future reference.  Most will be deleted upon further review.
Some will be used for installations.
** IGV

modules
dotfiles?tex

** IGV Developer Distribution
wget http://www.broadinstitute.org/igvdata/downloads/IGVDistribution_dev.zip
unzip IGVDistribution_dev.zip
cd IGVDistribution_dev
ant
# does not include igvtools, which is what I need now....

** IGVtools
# wget http://www.broadinstitute.org/igvdata/downloads/igvtools_1.5.11.zip
cd /Volumes/SAN1/BioTools/Extols/
wget http://www.broadinstitute.org/igvdata/downloads/igvtools_nogenomes_1.5.11.zip
unzip igvtools_nogenomes_1.5.11.zip 


wget http://www.broadinstitute.org/igv/projects/downloads/igvtools_nogenomes_2.1.24.zip
unzip igvtools_nogenomes_2.1.24.zip
install  igvtools_nogenomes/* /Volumes/SAN1/BioTools/bin/




################################################################################
NOTHING BELOW 
** homebrew: installation & configuration

install homebrew to manage libs/progs out of /usr/local

#+begin_src sh

## If set, instructs Homebrew to always assume --verbose when running commands.

/usr/bin/ruby -e "$(/usr/bin/curl -fossil https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"


export HOMEBREW_VERBOSE=1 

# TODO: register this as a service that servives restart using
# launchctld 
launchctl remove brewserver     # in case it is already running. 
launchctl submit -l brewserver  -p /usr/local/bin/brew  -o   /Users/mec/log/brewServer/out.log -e   /Users/mec/log/brewServer/error.log -- brew server 
launchctl start brewserver

## todo: get brewserver running as a system demon writing to /var/log

#+end_src



*** edit /etc/paths and /etc/manpaths to put /usr/local in front

(actually I did that in the middle of all the homebrew installations,
below)
#+begin_src sh

gfind  ${PATH//:/ } /Volumes/SAN1/BioTools/bin/ -type f -printf '%h\t%f\n' | gsort --field-separator=$'\t' --key=2 | guniq --skip-fields=1 --all-repeated | perl -a -n -e 'print "dupfilename: $F[1]\n" unless $lastkey eq $F[1];  $lastkey = pop(@F); print "\t@F\n"' | head


#+end_src

#+RESULTS:
| dupfilename: | cisml.css                                                         |
|              | /Volumes/SAN1/BioTools/bin/doc/examples/fimo_example_output_files |
|              | /Volumes/SAN1/BioTools/bin/etc                                    |
| dupfilename: | fimo-to-html.xsl                                                  |
|              | /Volumes/SAN1/BioTools/bin/doc/examples/fimo_example_output_files |
|              | /Volumes/SAN1/BioTools/bin/etc                                    |
| dupfilename: | fimo.html                                                         |
|              | /Volumes/SAN1/BioTools/bin/doc                                    |
|              | /Volumes/SAN1/BioTools/bin/doc/examples/fimo_example_output_files |
| dupfilename: | logo1.png                                                         |

mv /Volumes/SAN1/BioTools/bin/bin  /Volumes/SAN1/BioTools/binbin
dupfilename: alphtype
	/Volumes/SAN1/BioTools/bin
	/Volumes/SAN1/BioTools/bin/bin
dupfilename: ama
	/Volumes/SAN1/BioTools/bin
	/Volumes/SAN1/BioTools/bin/bin
dupfilename: beadstring
	/Volumes/SAN1/BioTools/bin
	/Volumes/SAN1/BioTools/bin/bin

** emacs

following more-or-less http://wikemacs.org/wiki/Installing_Emacs_on_OS_X

#+begin_src sh

brew install gtk+

# emacs prereq: TODO: install emacs.rb homebrew patch for them.

brew install giflib 
brew install librsvg 
brew install ghostscript # required for doc-view mode to display pdfs
			 # in emacs.
brew install aspell --lang=en

brew edit emacs
# ... and remove the line which adds --no-jpeg etc when building
# --with-x.  TODO: submit patch to homebrew formula for emacs
#EMACSBREW='  --force --HEAD  --use-git-head  --without-ns --with-x'
# above no longer since we are now running emacs 24.1
EMACSBREW=' --without-ns --with-x'
brew uninstall emacs ${EMACSBREW}
# i though --force (below) would make this unneeded but without it we get 
brew install emacs ${EMACSBREW}

# brew unlink emacs
# if some emacs is already linked/installed

#brew link emacs ${EMACSBREW}
# error: already linked

#+end_src
*** ESS
#+begin_src sh
 src=https://svn.r-project.org/ESS/trunk/
 siteLisp=/usr/local/share/emacs/site-lisp
 eb='/usr/local/bin/emacs -batch'

 sudo svn checkout ${src}  ${siteLisp}/ess
 sudo ${eb} -L  ${siteLisp}/ess/lisp -f batch-byte-compile ${siteLisp}/ess/lisp/*.el
## note -L is required since thre are dependencies individual files in the directory.


#+end_src

** mysql
+ move datadir to   /Volumes/SAN1/Databases/mysql
#+begin_src sh

#shut off current and unregister startup
sudo launchctl unload -w /Library/LaunchDaemons/com.mysql.mysqld.plist 
sudo rm /Library/LaunchDaemons/com.mysql.mysqld.plist
# I SHOULD HAVE JUST HIDDEN IT - SAVE IT FOR REFERENCE


# install new
brew install mysql
brew link mysql
unset TMPDIR
##sudo   mysql_install_db --verbose --user=mysql --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp
sudo   mysql_install_db --verbose --user=mysql --basedir="$(brew --prefix mysql)" --datadir=/Volumes/SAN1/Databases/mysql --tmpdir=/tmp

mysql.server start

/usr/local/Cellar/mysql/5.5.25/bin/mysqladmin -u root password 'sex2gooddb'

sudo    cp /usr/local/Cellar/mysql/5.5.25/homebrew.mxcl.mysql.plist /Library/LaunchDaemons/
sudo    launchctl load -w //Library/LaunchDaemons/homebrew.mxcl.mysql.plist


### TODO: how to get 
#### TODO:  tests are failing - review this:

cd /usr/local/Cellar/mysql/5.5.25/mysql-test ; perl mysql-test-run.pl

Logging: mysql-test-run.pl  
120611 14:51:37 [Warning] Setting lower_case_table_names=2 because file system for /tmp/hbhax52Uuo/ is case insensitive
MySQL Version 5.5.25
...
main.mysql_client_test                   [ fail ]
        Test ended at 2012-06-11 15:19:17

CURRENT_TEST: main.mysql_client_test
mysqltest: At line 17: command "$MYSQL_CLIENT_TEST --getopt-ll-test=25600M $PLUGIN_AUTH_CLIENT_OPT >> $MYSQLTEST_VARDIR/log/mysql_client_test.out.log 2>&1" failed

Output from before failure:
exec of '/usr/local/Cellar/mysql/5.5.25/bin/mysql_client_test --defaults-file=/usr/local/Cellar/mysql/5.5.25/mysql-test/var/my.cnf --testcase --vardir=/usr/local/Cellar/mysql/5.5.25/mysql-test/var --getopt-ll-test=25600M --plugin-dir=/usr/local/Cellar/mysql/5.5.25/lib/plugin >> /usr/local/Cellar/mysql/5.5.25/mysql-test/var/log/mysql_client_test.out.log 2>&1' failed, error: 256, status: 1, errno: 22



The result from queries just before the failure was:
SET @old_general_log= @@global.general_log;
SET @old_slow_query_log= @@global.slow_query_log;

 - saving '/usr/local/Cellar/mysql/5.5.25/mysql-test/var/log/main.mysql_client_test/' to '/usr/local/Cellar/mysql/5.5.25/mysql-test/var/log/main.mysql_client_test/'

Only  915  of 2218 completed.
mysql-test-run: *** ERROR: Not all tests completed
#+end_src

** homebrew pkgs
brew install sqsh               
# needed for testing installation of modules 
brew install dejagnu
brew install modules # whose receipt I created

# old gcc is needed for some brews.  
# Can be selected with `brew install pkg -use-gcc`

brew tap homebrew/dupes
brew install homebrew/dupes/apple-gcc42

brew install findutils
brew install automake
brew install make
brew install saxon
brew install parallel

brew install fastx_toolkit

brew install tophat --use-gcc	# fails on lion without gcc42
brew install gmap-gsnap --with-gmapdb=/Volumes/SAN1/Databases/gmapdb 
brew install bedtools
brew install tabix
brew install bowtie --use-gcc

# needed by R !?
brew install tcl
brew install tk
# gave the following: 
# Warning: Non-libraries were installed to "lib".
# Installing non-libraries to "lib" is bad practice.
# The offending files are:
# /usr/local/Cellar/tk/8.5.9/lib/tkConfig.sh

*** R

+ dmg installed by hand also the tcltk enable dmg

** more brew packages

some of these were already installed while installing emacs.

After install, examine each log file in file:homebrewLog
#+begin_src sh
brew install parallel

cat homebrew.sh | parallel

# move everything into subdir and try again, this time NOT in parallel, picking up the pieces as it were:

cat homebrew.sh | bash

#+end_src

*** failures
**** graphviz
+ graphviz fails with "You have not agreed to the Xcode license
  agreements, please run xcodebuild standalone from within a Terminal
  window to review and agree to the Xcode license agreements." even though I did this at least once
+ o-make : ignore for now
***** 2012-06-08
`brew install graphviz` works but with many notices:
If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `DYLD_LIBRARY_PATH' environment variable
     during execution

indeed, installing the Rgraphviz package fails as:

> library(Rgraphviz)
Loading required package: graph
Loading required package: grid
Error : .onLoad failed in loadNamespace() for 'Rgraphviz', details:
  call: value[[3L]](cond)
  error: unable to load shared object '/Volumes/SAN1/Users/mec/Library/R/2.15/library/Rgraphviz/libs/x86_64/Rgraphviz.so':
  dlopen(/Volumes/SAN1/Users/mec/Library/R/2.15/library/Rgraphviz/libs/x86_64/Rgraphviz.so, 6): Library not loaded: /usr/local/lib/libgvc.5.dylib
  Referenced from: /Volumes/SAN1/Users/mec/Library/R/2.15/library/Rgraphviz/libs/x86_64/Rgraphviz.so
  Reason: image not found

  Check that (1) graphviz is installed on your system; (2) the installed version of graphviz matches '2.26.3'; this is the version used to build this Rgraphviz package; (3) graphviz is accessible to R, e.g., the path to the graphviz 'bin' directory is in the system 'PATH' variable.  See additional instructions in the 'README' file of the Rgraphviz 'source' distribution, available at

  Http://bioconductor.org/packages/release/bioc/html/Rgraphviz.html

  Ask further questions on the Bioconductor mailing list

  http://bioconductor.org/docs/mailList.html


requiring reinstalling from sources after setting 

export PKG_CONFIG_PATH=/usr/local/Cellar/graphviz/2.28.0/lib/pkgconfig

which builds with trace including importantly:

installing *source* package 'Rgraphviz' ...
configure: No --with-graphviz option was specified. Trying to find Graphviz using other methods.
checking for pkg-config... /usr/local/bin/pkg-config
configure: Found Graphviz version '2.28.0'.
configure: Graphviz major version is '2' and minor version is '28'.
configure: Using the following compilation and linking flags for Rgraphviz
configure:    PKG_CPPFLAGS=-I/usr/local/Cellar/graphviz/2.28.0/include/graphviz  
configure:    PKG_LIBS=-L/usr/local/Cellar/graphviz/2.28.0/lib -lgvc -lgraph -lcdt  
configure:    GVIZ_DEFS= -DGRAPHVIZ_MAJOR=2 -DGRAPHVIZ_MINOR=28 
configure: Setting Graphviz Build version to '2.28.0'.
configure: creating ./config.status
config.status: creating R/graphviz_build_version.R
...
installing to /Library/Frameworks/R.framework/Versions/2.15/Resources/library/Rgraphviz/libs/x86_64
...
gcc -arch x86_64 -std=gnu99 -I/Library/Frameworks/R.framework/Resources/include -I/Library/Frameworks/R.framework/Resources/include/x86_64 -DNDEBUG -I/usr/local/Cellar/graphviz/2.28.0/include/graphviz    -DGRAPHVIZ_MAJOR=2 -DGRAPHVIZ_MINOR=28  -I/usr/local/include    -fPIC  -g -O2  -c LL_funcs.c -o LL_funcs.o

***** 2012-09-12
solution is to `brew install graphviz` and then install Rgraphviz from source, like this:
biocLite('Rgraphviz',type='source')

** R


#https://github.com/Homebrew/homebrew-science
# brew tap homebrew/science

install R by hand
install R switch

** BioConductor and other R modules
#+begin_src R
source("http://bioconductor.org/biocLite.R")
pkgs <- installed.packages()
pkgs <- pkgs[-grep("Part of R", pkgs[,'License']),] # remove base pkgs
pkgs<-rownames(pkgs)
save(pkgs,file='pkgs.rdat')


#+end_src

#+begin_src R
source("http://bioconductor.org/biocLite.R")
biocLite('XLConnect',type=source)


pkgs<-read.table('RPakcages.tab')
pkgs<-pkgs[substring(pkgs$License,1,5)!='Part ',]$Package
pkgs<-as.vector(pkgs)
installMe<-pkgs[0==sapply(sapply(pkgs,find.package,quiet=TRUE,verbose=FALSE),length)]
biocLite(installMe)




#+end_src

** Perl
following approach outlined in: http://perlbrew.pl/FixLion.html

#+begin_src sh

sudo chmod o+r /etc/profile 

sudo cat >>/etc/profile <<'EOF'
export PERLBREW_ROOT=/usr/local/perlbrew
export PATH=${PATH}:${PERLBREW_ROOT}/bin
EOF

. /etc/profile


curl -kL http://install.perlbrew.pl | bash

# into /usr/local/perlbrew/


perlbrew install -v perl-5.14.2 -j 10  -n /usr/local/perlbrew/site/customize.pl -Dusethreads --as perl-5.14.2_USETHREADS

perlbrew install -v perl-5.12.4 -j 10  -n /usr/local/perlbrew/site/customize.pl -Dusethreads 
#--As perl-5.14.2_USETHREADS

#+end_src

** OTHER Perl modules

looking at: grep -h -R '^use' src/* | sort | uniq
cpan -i Test::Output Getopt::Long List::MoreUtils List::Util Pod::Usage Set::IntSpan::Island Template 
cpan -i Modern::Perl App::Cmd Data::Dumper Deep::Hash::Utils Getopt::Long Graph Math::Combinatorics POSIX  Set::Scalar Sort::Key  Tie::IxHash YAML Moose 
cpan -i Params::Validate
cpan -i UNIVERSAL::require
cpan -i Template
cpan install Switch

cpan install GraphViz
looking at 
gfind ~/ASEA/trunk/ -iname '*.pm' | xargs grep -h '^use' | sort | uniq



*** BioPerl
using CPAN
lost log due to crash terminal
#+begin_src sh
# had to install at least some fo these:

export ARCHFLAGS='-arch x86_64' 

brew install GD mysql-connector-c jpeg berkeley-db expat 

# repeat the following installs as many times as needed, finally with -f to force


cpan -i YAML GD GD::Graph PerlIO::gzip
cpan -i Bundle::BioPerl
cpan -fi CJFIELDS/BioPerl-1.6.901.tar.gz

Result: FAIL
Failed 1/2 test programs. 1/13 subtests failed.
make: *** [test_dynamic] Error 255
  LDS/GD-2.46.tar.gz


Result: FAIL
Failed 38/40 test programs. 0/6 subtests failed.
make: *** [test_dynamic] Error 255
  CAPTTOFU/DBD-mysql-4.021.tar.gz
fixes?
 + http://blogs.perl.org/users/phillip_smith/2012/03/installing-dbdmysql-on-mac-os-x-107-lion.html

#+end_src

** * Jim kent src
+ Dependent Perl modules (Bio:DB:BigFile)

** Aspera Client
** mpich2
## needed by meme
brew install mpich2
** meme
*** installation/upgrade
#+begin_src sh
  wget http://meme.nbcr.net/downloads/meme_current.tar.gz
  tar zxf meme_current.tar.gz 
  cd meme_4.8.1
  ./configure --prefix=/Volumes/SAN1/BioTools --with-url="http://meme.nbcr.net/meme"
  make
  make test
  
  wget http://meme.nbcr.net/downloads/databases/motif_databases.5.tgz
  tar xzf motif_databases.5.tgz
  cp motif_databases/motif_db.csv etc
  sudo mv motif_databases /Volumes/SAN1/BioTools/db
  
  wget http://meme.nbcr.net/downloads/databases/gomo_databases.3.tgz
  tar xzf gomo_databases.3.tgz 
  cp gomo_databases/gomo_db.csv etc
  sudo mv gomo_databases /Volumes/SAN1/BioTools/db
  
  sudo make install
  
  # found that this was required by command-line-tool 
  sudo cpan HTML::Template 
#+end_src
*** NOT DONE
+ running regression tests.  
*** 2011-06-07 mec patches 4.6.1
#per http://meme.nbcr.net/downloads/meme_4.6.1.patch_1_readme.txt
pushd /Volumes/SAN1/src/meme_4.6.1/
wget http://meme.nbcr.net/downloads/meme_4.6.1.patch_1
patch -p1 -i meme_4.6.1.patch_1 
sudo make install
popd
*** 2011-07-15 dreme-hacked-for-rna installed

/Volumes/SAN1/src/meme_4.6.1/scripts/dreme_RNAHACK obtained from personal correspondance

"I did a very quick and ugly hack to the DREME code to allow it to
search only the given strand if "-norc" is given on the command line.
Consider this "use at your own risk" software until we implement it
fully in a future release of the MEME Suite.

But I think the results should be correct.  Its possible that the E-values
might be high by a factor of 2, but that probably won't worry you too much.

If it doesn't run for you, you might need to edit the first line to point to your
installation of python.  Try "which python" from a shell to find out what the
correct path should be."


installed on top of dreme using: 
a) sudo cp -f  /Volumes/SAN1/src/meme_4.6.1/scripts/dreme_RNAHACK  /Volumes/SAN1/BioTools/bin/dreme
b) match /Volumes/SAN1/src/meme_4.6.1/scripts/meme-chip to:  push(@dreme_args, '-norc') if $meme_norevcomp;
a) sudo cp -f  /Volumes/SAN1/src/meme_4.6.1/scripts/meme-chip  `which meme-chip`

*** NOTE
+ MEME docs recommend installation subordinate to a meme
directory(i.e. --prefix=/Volumes/SAN1/BioTool/meme) and adding the
/bin director to $PATH.  This would be a good idea for this package
since there are SOOO many binaries, and non standard other directories
(i.e. /install).  BUT, this was not done previously and I am not
cleaning up now... so we install on-top-of previous installation.  At
least it is not in /usr/local!


LATER


*** installation/upgrade
#+begin_src sh
  wget http://meme.nbcr.net/downloads/meme_current.tar.gz
  tar zxf meme_current.tar.gz 
  cd meme_4.8.1
  ./configure --prefix=/Volumes/SAN1/BioTools --with-url="http://meme.nbcr.net/meme"
  make
  make test
  
  wget http://meme.nbcr.net/downloads/databases/motif_databases.5.tgz
  tar xzf motif_databases.5.tgz
  cp motif_databases/motif_db.csv etc
  sudo mv motif_databases /Volumes/SAN1/BioTools/db
  
  wget http://meme.nbcr.net/downloads/databases/gomo_databases.3.tgz
  tar xzf gomo_databases.3.tgz 
  cp gomo_databases/gomo_db.csv etc
  sudo mv gomo_databases /Volumes/SAN1/BioTools/db
  
  sudo make install
  
  # found that this was required by command-line-tool 
  sudo cpan HTML::Template 
#+end_src
** SRA Toolkit (from ncbi)
** perl Bio::DB::Sam

I modified homebrew's samtools formula to NOT create extra directory
level of .../include/bam/bam.h  but just ../include/bam.h so that
Bio::DB::Sam could find them.

brew uninstall samtools
brew edit samtools
# change it to NOT
#    #(include+'bam').install Dir['*.h'] 
# but rather
#    (include).install Dir['*.h'] 
brew install samtools
export SAMTOOLS=/usr/local/opt/samtools/include/bam/

cpan -i Bio::DB::Sam 

perl -MBio::DB::Sam -e print 'VERSION'

** EPCR
2012-10-03 
brew create from
ftp://ftp.ncbi.nlm.nih.gov/pub/schuler/e-PCR/e-PCR-2.3.12-1-src.zip

has to rename .rb

used following notes:

   Use LF64LDFLAGS= LF64CCFLAGS=-DNATIVE_LARGEFILES (yes, space after
   first "=") argument with gmake since Mac OS/2 does not have (and does
   not need) *64 file functions and off64_t

** emboss
*** 2012-06-08

brew install emboss

seemed successful - single warning - root cause undetermined:
Warning: Could not fix install names for /usr/local/Cellar/emboss/6.4.0/lib/libajax.6.dylib
** vmatch

ftp://lscsa.de/pub/lscsa//vmatch-2.1.7-i686-apple-darwin-32-bit.tar.gz

################################################################################

** COMMENT
*** jksrc 
**** just a few binaries as needed
mkdir -p u
cd u

curl 'http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.i386/{isPCR}' -o "./#1"
chmod a+x *
mv * /Volumes/SAN1/BioTools/bin

**** method from git
the following is marked up version of the INSTALL log, where only the
uncommented lines were in fact executed.
#+begin_src sh
  ### CONTENTS AND COPYRIGHT
  ### 
  ### This directory contains the entire source tree for Jim Kent and the
  ### UCSC Genome Bioinformatics Group's suite of biological analysis 
  ### and web display programs.  All files are copyrighted, but license 
  ### is hereby granted for personal, academic, and non-profit use.  
  ### A license is also granted for the contents of the top level lib 
  ### directory for commercial users.  Commercial users should contact 
  ### kent@soe.ucsc.edu for access to other modules.
  ### 
  ### Most users will only be interested in the inc and lib
  ### directories, which contain the interfaces and implementations
  ### to the library routines,  and in a few specific applications.
  ### The applications are scattered in other directories.
  ### Many of them are web based.  A few of them expect
  ### the MySQL database to be around.
  ### 
  ### GENERAL INSTALL INSTRUCTIONS
  ### 
  ### 1. Get the code.  The best way to do this now for
  ###    Unix users is via Git following the instructions at:
  ###      http://genome.ucsc.edu/admin/git.html
  ###    Or, fetch the entire source in a single file:
  ###      http://hgdownload.cse.ucsc.edu/admin/jksrc.zip
  ###    Note futher documentation for the build process in your
  ###    unpacked source tree in src/product/README.*
  ###    Especially note README.building.source and the "Known probl ems"
  ###    for typical situations you may encounter.
  
  #from git per: http://genome.ucsc.edu/admin/git.html
  cd /Volumes/SAN1/src/
  git clone git://genome-source.cse.ucsc.edu/kent.git
  cd kent
  git checkout -t -b beta origin/beta
  
  ### 2. Check that the environment variable MACHTYPE
  ###    exists on your system.  It should exist on Unix/Linux.  
  ###    (And making this on non-Unix systems is beyond
  ###    the scope of this README).  The default MACHTYPE is often a
  ###    long string: "i386-redhat-linux-gnu"
  ###    which will not function correctly in this build environment.
  ###    It needs to be something simple such as one of:
  ###     i386 i686 sparc alpha x86_64 ppc etc ...
  ###    with no other alpha characters such as: -
  ###    To determine what your system reports itself as, try the
  ###    uname options:  'uname -m' or 'uname -p' or 'uname -a'
  ###    on your command line.  If necessary set this environment variable.
  ###    Do this under the bash shell as so:
  ###        MACHTYPE=something
  ###        export MACHTYPE
  ###    or under tcsh as so:
  ###        setenv MACHTYPE something
  ###    and place this setting in your home directory .bashrc or .tcshrc
  ###    environment files so it will be set properly the next time you
  ###    login.  Remember to "export" it as show here for the bash shell.
  
  MACHTYPE=x86_64
  export MACHTYPE
  
  ### 3. Make the directory ~/bin/$MACHTYPE which is
  ###    where the (non-web) executables will go.
  ###    Add this directory to your path.
  
  cd src
  mkdir -p bin/${MACHTYPE}
  export PATH=${PATH}:"`pwd`/bin/${MACHTYPE}"
  mkdir p
  
  ### 4. Go to the jksrc/lib directory.  If it doesn't
  ###    already exist do a mkdir $MACHTYPE.
  cd lib
  mkdir -p $MACHTYPE
  ### 5. Type make.  On Alphas there will be 
  ###    some warning messages about "crudeAli.c"
  ###    otherwise it should compile cleanly.
  ###    It's using gcc.
  ### 6. Go to jksrc/jkOwnLib and type make.
  cd ../jkOwnLib/
  make
  
  ### 7. Go to the application you want to make and type 
  ###    make.  (If you're not sure, as a simple test
  ###    go to jksrc/utils/fixcr and type make,
  ###    then 'rehash' if necessary so your shell
  ###    can find the fixcr program in ~/bin/$(MACHTYPE).
  
  
  # or, go the top-level src
  cd ..
  
  #... and make them all
  
  # oh.. after first setting up the mysql 
  # refering to 
  #mysql_config --include
  #-I/usr/include/mysql
  #bash-3.2# mysql_config --libs
  #-pipe  -L/usr/lib/mysql -lmysqlclient -lz -lm
  
  export MYSQLLIBS="/usr/lib/mysql/libmysqlclient.a -lz"
  export MYSQLINC=/usr/include/mysql
  
  # now, make them
  export HOME=/Volumes/SAN1/src/kent/src
  make
  
  
  ###    The fixcr program changes Microsoft style
  ###    <CR><LF> line terminations to Unix style
  ###    <LF> terminations.  Look at the "gotCr.c"
  ###    file in the fixCr directory, and then
  ###    do a "fixcr gotCr.c" on it.
  ### 
  ### 
  ### INSTALL INSTRUCTIONS FOR BLAT
  ### 
  ### 1. Follow the general install instructions above.
  ### 2. If you're on an alpha system do a:
  ###      setenv SOCKETLIB -lxnet
  ###    on Solaris do
  ###      setenv SOCKETLIB "-lsocket -lnsl"
  ###    on SunOS do
  ###      setenv SOCKETLIB "-lsocket -lnsl -lresolv"
  ###    on Linux you can skip this step.
  ### 3. Execute make in each of the following directories:
  ###      jksrc/gfServer
  ###      jksrc/gfClient
  ###      jksrc/blat
  ###      jksrc/utils/faToNib
  ### 
  ### INSTALL INSTRUCTIONS FOR CODE USING THE BROWSER DATABASE
  ### (and other code in the jkSrc/hg subdirectory)
  ### 
  ### 1. Follow the general install instructions above.
  ### 2. Make the environment variable MYSQLINC point to
  ###    where MySQL's include files are.  (On my
  ###    system they are at /usr/include/mysql.)
  ###    While you're at it set the MYSQLLIBS
  ###    variable to point to something like
  ###    /usr/lib/mysql/libmysqlclient.a -lz
  ###    When available, the commands: mysql_config --include
  ###     and mysql_config --libs
  ###     will display the required arguments for these environment settings.
  ### 3. Execute make in jksrc/hg/lib
  ### 4. Execute make in the directory containing the
  ###    application you wish to build.
  ### 5. See also: http://genome.ucsc.edu/admin/jk-install.html
  ###    and more documentation in this source tree about setting up
  ###    a working browser in README files:
  ###    jksrc/product/README.building.source
  ###    jksrc/product/README.local.git.source
  ###    jksrc/product/README.mysql.setup
  ###    jksrc/product/README.install
  ###    jksrc/product/README.trackDb
  ###    jksrc/hg/makeDb/trackDb/README
  ###    There are numerous README files in the source tree describing
  ###     functions or modules in that area of the source tree.
  ### 
  ### MAJOR MODULES
  ### 
  ### Here is a list of some of the more useful modules in
  ### the library.  Unless noted the module is a .h file
  ### in the inc directory and a .c file in the lib
  ### directory.
  ### 
  ### o - common  - String handling, singly-linked list handling. 
  ###     Other basic stuff every other module uses.
  ### o - hash - Simple but effective hash table routines.
  ### o - linefile - Line oriented file input, on some systems
  ###     much faster than fgets().
  ### o - cheapcgi - Parses out cgi variables for scripts called
  ###     from web pages.
  ### o - htmshell - Helps generate HTML output for scripts that
  ###     are called from web pages or just want to make web
  ###     pages.
  ### o - memgfx - Creates a 256 color image in memory which
  ###     can be drawn on, then saved as a .GIF file which
  ###     can be encorperated into a web page.
  ### o - fuzzyFind - Align two pieces of DNA that are 
  ###     relatively similar (~80% base identity or better).
  ###     Works best when one sequence is less than 30,000
  ###     bases and the other less than 100,000 bases.
  ### o - patSpace and supStitch - Align longer pieces of
  ###     DNA.
  ### o - xensmall - Align two small pieces of dissimilar DNA.
  ###     (7 State Pairwise HMM)
  ### o - xenbig - Align two large pieces of dissimilar DNA.
  ### o - jksql - Interface to mySQL that frees resources on
  ###     exit and error conditions.
  ### o - dnautils and dnaseq - Simple utilities on DNA.
  ### o - fa - Read/write fasta format files.
  ### o - serv* and port* - Adapt the code to the peculiarities of
  ###     various web servers.
  ### 
  ### 
  ### CODE CONVENTIONS
  ### 
  ### INDENTATION AND SPACING:
  ### 
  ### The code follows an indentation convention that is a bit
  ### unusual for C.  Opening and closing braces are on
  ### a line by themselves and are indented at the same
  ### level as the block they enclose:
  ###     if (someTest)
  ###     {
  ###     doSomething();
  ###     doSomethingElse();
  ###     }
  ### Tab stops are set to 8.  Each block of code is 
  ### indented by 4 from the previous block.  (In the
  ### vi editor set ts=8  set sw=4.)  Lines are no more than
  ### 100 characters wide.
  ### 
  ### NAMES
  ### 
  ### Symbol names begin with a lower-case letter.  The second 
  ### and subsequent words in a name begin with a capital letter 
  ### to help visually separate the words.  Abbreviation of words 
  ### is strongly discouraged.  Words of five letters and less should
  ### generally not be abbreviated. If a word is abbreviated in 
  ### general it is abbreviated to the first three letters:
  ###    tabSeparatedFile -> tabSepFile
  ### In some cases, for local variables abbreviating
  ### to a single letter for each word is ok:
  ###    tabSeparatedFile -> tsf
  ### In rare, complex, cases you may treat the
  ### abbreviation itself as a word, and only the
  ### first letter is capitalized.
  ###    genscanTabSeparatedFile -> genscanTsf
  ### Numbers are considered words.  You would
  ### represent "chromosome 22 annotations"
  ### as "chromosome22Annotations" or "chr22Ann."
  ### Note the capitalized 'A" after the 22.
  ### 
  ### These naming rules apply to variables, constants, functions, fields,
  ### and structures.  They generally are used for file names, database tables,
  ### database columns, and C macros as well, though there is a bit less
  ### consistency there in the existing code base.
  ### 
  ### ERROR HANDLING AND MEMORY ALLOCATION
  ### 
  ### Another convention is that errors are reported
  ### at a fairly low level, and the programs simply
  ### print an error message and abort.  If you
  ### need to catch errors underneath you see the
  ### file errAbort.h and install an "abort handler".
  ### 
  ### Memory is generally allocated through "needMem"
  ### (which aborts on failure to allocate) and the
  ### macros "AllocVar" and "AllocArray".  This 
  ### memory is initially set to zero, and the programs
  ### very much depend on this fact.
  ### 
  ### COMMENTING 
  ### 
  ### Every module should have a comment at the start of
  ### a file that explains concisely what the module
  ### does.  Explanations of algorithms also belong
  ### at the top of the file in most cases. Comments should
  ### be of the /*  */ form rather than the // form, which
  ### is not yet portable across all C compilers in all platforms.
  ### Structures should be commented following the pattern of this
  ### example:
  ### 
  ### struct dyString
  ### /* Dynamically resizable string that you can do formatted
  ###  * output to. */
  ###     {
  ###     struct dyString *next;      /* Next in list. */
  ###     char *string;               /* Current buffer. */
  ###     int bufSize;                /* Size of buffer. */
  ###     int stringSize;             /* Size of string. */
  ###     };
  ### 
  ### That is there is a comment describing the overall purpose
  ### of the object between the struct name, and the opening brace,
  ### and there is a short comment by each field.  In many cases
  ### these may not say much more than well-chosen field names,
  ### but that's ok. 
  ### 
  ### Almost any structure with more than three or four
  ### elements includes a "next" pointer as its first
  ### member, so that it can be part of a singly-linked
  ### list.  There's a whole set of routines (see
  ### common.c and common.h) which work on singly-linked
  ### lists where the next field comes first. Their
  ### names all start with "sl."
  ### 
  ### Functions which work on a structure by convention begin with
  ### the name of the structure, simulating an object-oriented
  ### coding style.  In general these functions are all grouped
  ### in a file, in this case in dyString.c.  Static functions in
  ### this file need not have the prefix, though they may.  Functions
  ### have a comment between their prototype and the opening brace
  ### as in this example:
  ### 
  ### char dyStringAppendC(struct dyString *ds, char c)
  ### /* Append char to end of string. */
  ### {
  ### char *s;
  ### if (ds->stringSize >= ds->bufSize)
  ###      dyStringExpandBuf(ds, ds->bufSize+256);
  ### s = ds->string + ds->stringSize++;
  ### *s++ = c;
  ### *s = 0;
  ### return c;
  ### }
  ### 
  ### For short functions like this, the opening comment may be the only
  ### comment.  Longer functions should be broken into logical 'paragraphs'
  ### with a comment at the start of each paragraph and blank lines
  ### between paragraphs as in this example:
  ### 
  ### struct twoBit *twoBitFromDnaSeq(struct dnaSeq *seq, boolean doMask)
  ### /* Convert dnaSeq representation in memory to twoBit representation.
  ###  * If doMask is true interpret lower-case letters as masked. */
  ### {
  ### int ubyteSize = packedSize(seq->size);
  ### UBYTE *pt;
  ### struct twoBit *twoBit;
  ### DNA last4[4];   /* Holds few bases. */
  ### DNA *dna;
  ### int i, end;
  ### 
  ### /* Allocate structure and fill in name. */
  ### AllocVar(twoBit);
  ### pt = AllocArray(twoBit->data, ubyteSize);
  ### twoBit->name = cloneString(seq->name);
  ### twoBit->size = seq->size;
  ###     
  ### /* Convert to 4-bases per byte representation. */
  ### dna = seq->dna;
  ### end = seq->size - 4;
  ### for (i=0; i<end; i += 4)
  ###     {
  ###     *pt++ = packDna4(dna+i);
  ###     }
  ### 
  ### /* Take care of conversion of last few bases. */
  ### last4[0] = last4[1] = last4[2] = last4[3] = 'T';
  ### memcpy(last4, dna+i, seq->size-i);
  ### *pt = packDna4(last4);
  ### 
  ### /* Deal with blocks of N. */
  ### twoBit->nBlockCount = countBlocksOfN(dna, seq->size);
  ### if (twoBit->nBlockCount > 0)
  ###     {
  ###     AllocArray(twoBit->nStarts, twoBit->nBlockCount);
  ###     AllocArray(twoBit->nSizes, twoBit->nBlockCount);
  ###     storeBlocksOfN(dna, seq->size, twoBit->nStarts, twoBit->nSizes);
  ###     }
  ### 
  ### /* Deal with masking */
  ### if (doMask)
  ###     {
  ###     twoBit->maskBlockCount = countBlocksOfLower(dna, seq->size);
  ###     if (twoBit->maskBlockCount > 0)
  ###         {
  ###         AllocArray(twoBit->maskStarts, twoBit->maskBlockCount);
  ###         AllocArray(twoBit->maskSizes, twoBit->maskBlockCount);
  ###         storeBlocksOfLower(dna, seq->size,
  ###                 twoBit->maskStarts, twoBit->maskSizes);
  ###         }
  ###     }
  ### return twoBit;
  ### }
  ### 
  ### ====================================================================
  ### This file last updated: $Date: 2010/06/03 16:48:53 $
#+end_src
  
*** Bio::DB::BigFile perl module from CPAN
#+begin_src sh
  wget http://search.cpan.org/CPAN/authors/id/L/LD/LDS/Bio-BigFile-1.04.tar.gz
  tar -zxf Bio-BigFile-1.04.tar.gz 
  cd Bio-BigFile-1.04 
  
  export KENT_SRC=/Volumes/SAN1/src/kent/src
  export MACHTYPE=x86_64
  perl Build.PL
  ./Build
  
  # got these warnings 
  ld: warning: in /Volumes/SAN1/src/kent/src/lib/x86_64/jkweb.a, file was built for unsupported file format which is not the architecture being linked (i386)
  ld: warning: in /Volumes/SAN1/src/kent/src/lib/x86_64/jkweb.a, file was built for unsupported file format which is not the architecture being linked (ppc)
  
    ./Build test
  # but all tests passed
  
  # note: this was built as root so did not sudo for install.  Also, did NOT set prefix
  ./Build install
  
  
  bash-3.2#   ./Build install uninst=1
  Building Bio-BigFile
  Files found in blib/arch: installing files in blib/lib into architecture dependent library tree
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/auto/Bio/DB/BigFile/BigFile.bs
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/auto/Bio/DB/BigFile/BigFile.bundle
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/Bio/DB/BigBed.pm
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/Bio/DB/BigFile.pm
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/Bio/DB/BigWig.pm
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/Bio/DB/BigWigSet.pm
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/Bio/DB/BigFile/Constants.pm
  Installing /Library/Perl/5.10.0/darwin-thread-multi-2level/Bio/DB/BigFile/Iterators.pm
  Installing /usr/local/share/man/man3/Bio::DB::BigBed.3pm
  Installing /usr/local/share/man/man3/Bio::DB::BigFile.3pm
  Installing /usr/local/share/man/man3/Bio::DB::BigWig.3pm
  Installing /usr/local/share/man/man3/Bio::DB::BigWigSet.3pm
  Installing /usr/local/bin/bigWigToWig.pl
  Installing /usr/local/bin/index_bigwigset.pl
  Installing /usr/local/bin/wigToBigWig.pl
#+end_src
** io_lib (for illumin2srf)
  #+begin_src sh
    TARBALL=http://downloads.sourceforge.net/project/staden/${PKGNAME}/1.12.5/${PKGNAME}-1.12.5.tar.gz
    PKGNAME=io_lib
    
    PFX=/Volumes/SAN1/BioTools
    SRCDIR=/Volumes/SAN1/src
    
    TARBASE=`basename ${TARBALL}`
    UNTARTO=${TARBASE%%.tar.gz}     # delete any trailing .tar.gz
    
    mkdir -p ${SRCDIR}/${PKGNAME}/${UNTARTO}
    cd ${SRCDIR}/${PKGNAME}
    wget ${TARBALL}
    tar -C ${UNTARTO} -zxvf ${TARBASE}
    cd ${UNTARTO}
    ./configure --prefix=${PFX}
    make
    make test
    sudo make install
    popd    
    
#+end_src
** Bio::DB::SAM
export SAMTOOLS=/Volumes/SAN1/src/samtools/
sudo -E cpan Bio::DB::Sam       # -E to pick up SAMTOOLS
*** LOG:
2011-04-25 mec upgrade to 1.28

perl -MBio::DB::Sam -san -e 'my $sam =  Bio::DB::Sam->new(-bam  => $bam, -split_splices=>0); ($f)=$sam->segment(@F)->features(q{coverage}); print $f->coverage' -- -bam=/Users/lab_project/SR_kd/bam/B52_KD_merged.bam
2L 11818306 11818679
# should not have the zeros when split_splices = 0
** ASPERA client
needed for short read archive (SRA) download
#+begin_src sh
  cd ~/Desktop
  curl -L -O
  http://www.asperasoft.com/download/sw/connect/2.4/AsperaConnect-mac-intel.dmg
  
  hdiutil attach AsperaConnect-mac-intel.dmg
  cd /Volumes/Aspera\ Connect\ Installer/
  
  #TODO: where should these be put or how else to get on path?
  export PATH=${PATH}:/Volumes/ServerHD/Applications/Aspera\ Connect.app/Contents/Resources
  
  # i was following steps at
  # http://codesnippets.joyent.com/posts/show/322
  # but the following would not work or confused me so I finished the
  # install from genekc07 desktop
  
  sudo installer -pkg  what to put here? -target "/"
  
  hdiutil detach /Volumes/Aspera\ Connect\ Installer/
  
#+end_src
** SRA Toolkit
#+begin_src sh
  PFX=/Volumes/SAN1/BioTools
  SRCDIR=/Volumes/SAN1/src
  
  TARBALL=http://trace.ncbi.nlm.nih.gov/Traces/sra/static/sratoolkit.2.1.3-mac64.tar.gz
  
  PKGNAME=SRAToolkit
  
  TARBASE=`basename ${TARBALL}`
  UNTARTO=${TARBASE%%.tar.gz}     # delete any trailing .tar.gz
  
  mkdir -p ${SRCDIR}/${PKGNAME}/${UNTARTO}
  cd ${SRCDIR}/${PKGNAME}
  wget ${TARBALL}
  tar -zxvf ${TARBASE} # which _should_ untar to  ${UNTARTO}
  
  ln -fhs ${UNTARTO} latest
  
  
  TODO: one of:
  export PATH=${PATH}:/Volumes/SAN1/src/SRAToolkit/latest
  ginstall latest
#+end_src

** gsnap & gmap
*** 
wget http://research-pub.gene.com/gmap/src/gmap-gsnap-2010-07-27.tar.gz
tar -zxvf gmap-gsnap-2010-07-27.tar.gz
cd gmap-2010-07-27
./configure --prefix=/Volumes/SAN1/BioTools
make
sudo make install

*** 2011-08-02 mec installed
cd /Volumes/SAN1/src/
wget http://research-pub.gene.com/gmap/src/gmap-gsnap-2011-03-28.tar.gz
tar -zxvf gmap-gsnap-2011-03-28.tar.gz
cd gmap-2011-03-28.v3
./configure --prefix=/Volumes/SAN1/BioTools  --with-gmapdb=/Volumes/SAN1/BioTools/gmapdb
make
sudo make install


##there already exists:
#/usr/local/share/dmel-all-chromosome-r5.22
#which i moved using
mkdir /Volumes/SAN1/BioTools/gmapdb
sudo mv /usr/local/share/dmel-all-chromosome-r5.22/  /Volumes/SAN1/BioTools/gmapdb

*** 2011-08-31 mec moved it again
sudo mv  /Volumes/SAN1/BioTools/gmapdb    /Volumes/SAN1/BioDB
*** 2011-09-30 mec 
moved gmapdb databases again and fresh install

#+begin_src sh
    sudo mv     /Volumes/SAN1/BioDB/gmapdb/*  /Volumes/SAN1/Databases/gmapdb
    cd /Volumes/SAN1/src/gmap-gsnap
    wget http://research-pub.gene.com/gmap/src/gmap-gsnap-2011-09-14.tar.gz
    tar -zxvf gmap-gsnap-2011-09-14.tar.gz
    cd gmap-2011-09-14
    ./configure --prefix=/Volumes/SAN1/BioTools --with-gmapdb=/Volumes/SAN1/Databases/gmapdb --with-samtools=/Volumes/SAN1/src/samtools/ 
    make
    make check 
    sudo make install
    
    ## what follows is testing: 
    
  gmap --version
  
    GMAPDB=/Volumes/SAN1/Databases/gmapdb
    cd /Users/lab_project/Clip_Seq/Nehemiah/How_lib2_secAlignment/August_2011/
    mkdir sam.gsnap
    time nohup gsnap --gunzip -t15 -N1 -A sam -d dmel-all-chromosome-r5.22 -s dmel_gsnapss --nofails -m2 -n1 -Q  seq/How_noLiCl_sequence.txt.gz > sam.gsnap/How_noLiCl_sequence.sam 2> sam.gsnap/How_noLiCl_sequence.log &
      

    # create --splicesites files for dmel5_22
  # this old method does NOT WORK ANYMORE.  TODO: RECODE IN BIOCONDUCTOR!
    asea gtx2gspanSS /Volumes/SAN1/Users/mec/asea/trunk/DATA/ASA/dmel_5_22_gtx.tab > ${GMAPDB}/dmel_gsnapss.tab
    cat ${GMAPDB}/dmel_gsnapss.tab | iit_store -o ${GMAPDB}/dmel_gsnapss.iit
    /Volumes/SAN1/Users/mec/asea/trunk/ASEA/Command/gtx2gsnapSS.pm
    
    
    
  
#+end_src

*** 2011-12-21 mec 
fresh  build/install

#+begin_src sh
    cd /Volumes/SAN1/src/gmap-gsnap
    wget http://research-pub.gene.com/gmap/src/gmap-gsnap-2011-12-14.tar.gz
    tar -zxvf gmap-gsnap-2011-12-14.tar.gz
    cd gmap-2011-12-14
    ./configure --prefix=/Volumes/SAN1/BioTools --with-gmapdb=/Volumes/SAN1/Databases/gmapdb --with-samtools=/Volumes/SAN1/src/samtools/ 
    make
    make check
    sudo make install
    
    ## what follows is testing: 
    
  gmap --version
  
    GMAPDB=/Volumes/SAN1/Databases/gmapdb
    cd /Users/lab_project/Clip_Seq/Nehemiah/How_lib2_secAlignment/August_2011/
    mkdir sam.gsnap
    time nohup gsnap --gunzip -t15 -N1 -A sam -d dmel-all-chromosome-r5.22 -s dmel_gsnapss --nofails -m2 -n1 -Q  seq/How_noLiCl_sequence.txt.gz > sam.gsnap/How_noLiCl_sequence.sam 2> sam.gsnap/How_noLiCl_sequence.log &

    # create --splicesites files for dmel5_22
  # this old method does NOT WORK ANYMORE.  TODO: RECODE IN BIOCONDUCTOR!
    asea gtx2gspanSS /Volumes/SAN1/Users/mec/asea/trunk/DATA/ASA/dmel_5_22_gtx.tab > ${GMAPDB}/dmel_gsnapss.tab
    cat ${GMAPDB}/dmel_gsnapss.tab | iit_store -o ${GMAPDB}/dmel_gsnapss.iit
    /Volumes/SAN1/Users/mec/asea/trunk/ASEA/Command/gtx2gsnapSS.pm
    
    
    
  
#+end_src

*** 2012-01-09 mec
#+begin_src sh
cd /Volumes/SAN1/src/gmap
# wget http://research-pub.gene.com/gmap/src/gmap-gsnap-2012-01-06.tar.gz
# obtained via personal correspondance
mv /Users/lab_project/SPombe/gmap-gsnap-2012-01-06.tar.gz .
tar -zxvf gmap-gsnap-2012-01-06.tar.gz
cd gmap-2012-01-06
./configure --prefix=/Volumes/SAN1/BioTools --with-gmapdb=/Volumes/SAN1/Databases/gmapdb --with-samtools=/Volumes/SAN1/src/samtools/ 
make 
make check
sudo make install

#+end_src
** maq
wget http://downloads.sourceforge.net/project/maq/maq/0.7.1/maq-0.7.1.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fmaq%2Ffiles%2F&ts=1281472961&mirror=softlayer 
tar -zxvf maq-0.7.1.tar.bz2 
cd maq-0.7.1
./configure --prefix=/Volumes/SAN1/BioTools
make
sudo make install
** bwa
wget http://sourceforge.net/projects/bio-bwa/files/bwa-0.5.8a.tar.bz2/download
tar -zxvf bwa-0.5.8a.tar.bz2 
cd bwa-0.5.8a
make
install bwa /Volumes/SAN1/BioTools/bin
** cdb
*** install
sudo brew install cdb
sudo cpan CDB_File
*** not yet working example of indexing sam files by ID

f=/Volumes/SAN1/src/samtools/examples/toy.sam
/Volumes/SAN1/src/samtools/examples/toy.sam

# index by read name the line number(s) at which an alignment of that
# read is found:
perl -MCDB_File -ane 'next if /^@/; $t{$F[0]}=$.;  END{CDB_File::create %t, "${ARGV}.cdb", "${ARGV}.cdb.$$"}'  $f
# inspect the cdb index built:
cdbdump <  /Volumes/SAN1/src/samtools/examples/toy.sam.cdb 
# retrieve the line number(s) for read IDs on std input
echo -e 'r002\nr003' | perl -MCDB_File -sape 'BEGIN{$catref = tie %cdb, CDB_File, ${f}}; chomp; $x = $catref->multi_get($_);  warn "not found: $_\n" unless @$x;  $_ = "@{$x}\n";' -- -f=$f.cdb
# TODO: would like to be able to seek!  for this need byte offset.  How to make work with bamfiles?

** cdbfasta 
from: http://compbio.dfci.harvard.edu/tgi/software/
wget https://downloads.sourceforge.net/project/cdbfasta/cdbfasta.tar.gz?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fcdbfasta%2F&ts=1282672340&mirror=softlayer
edit the make file 
make GCLDIR=`pwd`/gclib
sudo install cdbfasta cdbyank /Volumes/SAN1/BioTools/bin
*** comparison with Bio::Index::Fastq 
time cdbfasta -Q s_5_sequence.txt
14280842 entries from file s_5_sequence.txt were indexed in file s_5_sequence.txt.cidx

real	0m15.929s
user	0m10.845s
sys	0m2.031s
cdbyank s_5_sequence.txt.cidx  -a HWI-EAS403_0001:5:1:4:1469#0/2

**** B:I:F is must slower and created huge files
time bidx Fastq s_5_sequence.txt

function bidx {
    local I=$1;
    local F=$2;
    shift 2;
    local M=Bio::Index::${I};
    perl -M${M} -e "${M}->new(-filename => qq{${F}.bidx},-write_flag => 1)->make_index(qq{${F}});"
}
** seqtk
## in progress 2012-03-27
./configure --prefix=/Volumes/SAN1/BioTools
git clone https://github.com/lh3/seqtk
./Build test

** Bio::Tools::Primer3Redux
git clone https://github.com/cjfields/Bio-Tools-Primer3Redux.git
./Build test
sudo ./Build install

** spatialite

consdiering using for indexing genomic coordinates  - not followed up

#+begin_src sh
  sudo brew install proj
  sudo brew install geos
  
  # note: libiconv is not listed dependency, but the one is /usr/lib
  # fails
  sudo brew install libiconv
  sudo brew link libiconv
  
  #sudo -E brew -dv install libspatialite
  # note: the -E in the sudo is so the exports are inherited in the
  # build/install environment.  Without them, libspatialite is linked
  # incorrectly, resulting in:
  #sqlite> .load 'libspatialite.dylib'
  #.load 'libspatialite.dylib'
  #Error: dlopen(libspatialite.dylib, 10): Symbol not found: _libiconv
  # Referenced from: /usr/local/lib/libspatialite.dylib
# Expected in: flat namespace
# in /usr/local/lib/libspatialite.dylib         

# so, instead, I found the following works.  I'm not sure how to fix
# the brew formula to make this happen (or even why this is not
# happening by default)

#c.f.
# http://www.gaia-gis.it/spatialite/how_to_build_libspatialite.html#mac
# http://groups.google.com/group/xerial/browse_thread/thread/9ff3e283cf7135ea  

  sudo brew install --interactive libspatialite
  export "CFLAGS=-I/usr/local/include"
  export "LDFLAGS=-L/usr/local/lib"
  ./configure
  make install
  
  # into /usr/local/Cellar/libspatialite/2.4.0-rc4/
  #+end_src
** OMake (http://omake.metaprl.org/index.html)
sudo brew install OMake
** [[http://sing.ei.uvigo.es/pileline/index.php/Main_Page][PileLine]]

#+begin_src sh
cd /Volumes/SAN1/src
mkdir pileline
cd pileline
svn co https://pilelinetools.svn.sourceforge.net/svnroot/pilelinetools/trunk trunk
cd trunk
./configure --prefix=/Volumes/SAN1/BioTools
make
make test
sudo make install

#+end_src

** http://genometools.org/ 

ABORTED

cd /Volumes/SAN1/src
wget http://genometools.org/pub/genometools-1.3.8.tar.gz
cd
./configure --prefix=/Volumes/SAN1/BioTools
make
make test
sudo make install

sudo -E brew create http://genometools.org/pub/genometools-1.3.8.tar.gz

** rnacontext
cd /Volumes/SAN1/src
mkdir -p rnacontext
cd rnacontext
wget http://www.cs.toronto.edu/~hilal/rnacontext/rnacontext.zip  
mv rnacontext.zip 2010_Oct_13.zip
mkdir 2010_Oct_13
unzip 2010_Oct_13.zip -d 2010_Oct_13
cd  2010_Oct_13
--> read RNAcontext/READEME.txt
it requires
*** [[http://www.wadsworth.org/resnres/bioinfo/sfold/manual.html][sfold]]
**** NOTES:
documented as requiring darwin kernwl 9.3.0 but we are running 10.6.0

at step 5. the test failes
 Error: Sfold does not run on your platform at /Users/mec/sfold/sfold-2.2/bin/sfold.pl line 85.

let me try adding '.' to PATH

export PATH=${PATH}:.

	DYLD_LIBRARY_PATH=path_to_dylib_files
** sequenceread (for illumina2srf needed by GEO submission)
*** 2011-08-23 mec version 2.1.4 built/installed
  #+begin_src sh
    TARBALL=http://downloads.sourceforge.net/project/sequenceread/sequenceread/2.1.4/sequenceread-2.1.4.tar.gz
    PKGNAME=sequenceread

    PFX=/Volumes/SAN1/BioTools
    SRCDIR=/Volumes/SAN1/src

    TARBASE=`basename ${TARBALL}`
    UNTARTO=${TARBASE%%.tar.gz}     # delete any trailing .tar.gz

    mkdir -p ${SRCDIR}/${PKGNAME}/${UNTARTO}
    cd ${SRCDIR}/${PKGNAME}
    wget ${TARBALL}
    tar -zxvf ${TARBASE} # which _should_ untar to  ${UNTARTO}
    cd ${UNTARTO}
    ./configure --prefix=${PFX}
    make
    make test
    sudo make install
    popd
#+end_src
** GATK
#ftp://ftp.broadinstitute.org/pub/gsa/GenomeAnalysisTK/GenomeAnalysisTK-latest.tar.bz2

  #+begin_src sh
    PFX=/Volumes/SAN1/BioTools
    SRCDIR=/Volumes/SAN1/src
    
    TARBALL=ftp://ftp.broadinstitute.org/pub/gsa/GenomeAnalysisTK/GenomeAnalysisTK-1.1-33-gcf24303.tar.bz2
    PKGNAME=GATK
    
    TARBASE=`basename ${TARBALL}`
    UNTARTO=${TARBASE%%.tar.*}     # delete any trailing .tar.gz or bz2
    
    mkdir -p ${SRCDIR}/${PKGNAME}/${UNTARTO}
    cd ${SRCDIR}/${PKGNAME}
    wget ${TARBALL}
    tar -zxvf ${TARBASE} # which _should_ untar to  ${UNTARTO}
    ln -fhs ${UNTARTO} latest
    
    
    # TODO: where to put this:
    # function GATK {
    #     java -Xmx4g -jar /Volumes/SAN1/src/GATK/latest/GenomeAnalysisTK.jar  "$@"
    # }
    
    popd
    
#+end_src
** [[http://code.google.com/p/googlecl/wiki/RoadMap][google command line]]
sudo easy_install pip
sudo pip install googlecl
** [[http://fraenkel.mit.edu/TAMO/][TAMO]]

#ftp://ftp.broadinstitute.org/pub/gsa/GenomeAnalysisTK/GenomeAnalysisTK-latest.tar.bz2

  #+begin_src sh
    # 2011-09-28 - mec - installation failed - required dependencies from
    # other locations no longer available - punted - not crucial
    
    PFX=/Volumes/SAN1/BioTools
    SRCDIR=/Volumes/SAN1/src
    
    TARBALL=http://fraenkel.mit.edu/TAMO/downloads/TAMO_v1.0_110705.tar.gz
    PKGNAME=TAMO
    
    TARBASE=`basename ${TARBALL}`
    
    mkdir -p ${SRCDIR}/${PKGNAME}
    cd ${SRCDIR}/${PKGNAME}
    wget ${TARBALL}
    tar -zxvf ${TARBASE} # which _should_ untar to  ${UNTARTO}
    # rename to TAMO_v1.0_110705
    cd  TAMO_v1.0_110705
    python setup.py install
    
    
    
#+end_src
** gfortran

| 2011-11-14 | mec | installed |

appears to be needed for building some R packages from source while
upgrading from R 2.13 to R 2.14.  i.e lmtest Hmisc.  I am not sure how
they were installed before.  Possibly they had already been compiled
for 2.13 when they were installed.

#+begin_src sh
sudo su -
brew install gfortran

#+end_src

** gcc

cf:
 * http://pvs-wiki.csl.sri.com/index.php/FAQ#Emacs_reports_.22Cannot_open_doc_string_file.22
 * http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-get-latest-gnus.html
# I FIND BUILDING EMACS INSIDE EMACS SHELL IS THE PROBLEM (with environemt vars set)

** Apache
mkdir r
rsync -avR /etc/apache2 r/

rsync -avR /etc/paths r/
emacs site isp
ESS
org?
dna-mode


brew info
** sqsh

* 

#+BEGIN_SRC sh
git config --global user.name "Cook, Malcolm"
git config --global user.email "MEC@stowers.org"

#cd existing-project
git init
git add SCE.org # --all
git commit -m "Initial Commit"
git remote add origin http://MEC@stash/scm/cbio/sce.git
git push origin master
#+END_SRC
